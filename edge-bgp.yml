#
# Midonet Ansible Quickstart
# Copyright (C) 2015  Midokura SARL
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
---

- name: Get edges
  hosts: localhost
  connection: local
  vars_files:
  - vars/{{ deploy }}.yml
  - "{{ os_settings | default('vars/os_settings.yml') }}"
  tasks:
  - include: tasks/get-controller-edges.yml

- name: Gather facts
  hosts: all:!localhost
  gather_facts: yes

- name: edge
  hosts: edge
  become: yes
  tasks:

  - name: is eth1 up?
    shell: "ifconfig | grep eth1"
    register: is_eth1_up
    ignore_errors: true

  - name: eth1 down
    shell: "ifdown eth1"
    when: is_eth1_up|success

  - name: eth1 up
    shell: "ifup eth1"

  - name: get eth1 ip address
    shell: "ip route | grep eth1 | grep kernel | awk '{ print $9 }'"
    register: eth1_address

  - name: get eth1 net
    shell: "ip route | grep eth1 | grep kernel | awk '{ print $1 }'"
    register: eth1_net

  - name: eth1 down
    shell: "ifdown eth1"

  - name: eth1 up without ip
    shell: "ifconfig eth1 up"

  - name: write ip address to hostvars
    set_fact:
      exterior_ip:  "{{ eth1_address.stdout }}"
      exterior_net: "{{ eth1_net.stdout }}"


- name: controller
  hosts: controller
  vars_files:
  - vars/{{ deploy }}.yml
  - "{{ os_settings | default('vars/os_settings.yml') }}"
  vars:
    keystone_env:
      OS_USERNAME: admin
      OS_TENANT_NAME: admin
      OS_PASSWORD:  "{{ admin_password }}"
      OS_AUTH_URL: http://localhost:35357/v2.0/
  become: yes
  tasks:

  # NOTE: 2-edge only
  # TODO: Add support for >2 edges
  - name: Create edge router
    neutron_router: name=edge_router state=present
                     login_username=admin login_password={{ admin_password }} login_tenant_name=admin
    register: edge_router

  - name: Check if edge1 network exists
    shell: neutron net-list | grep edge1
    register: edge1_result
    environment: keystone_env

  - name: Create edge1 network
    shell: neutron net-create edge1 --tenant_id admin --provider:network_type uplink | grep " id " | awk '{print $4}'
    register: edge1_id
    environment: keystone_env

  - name: Check if edge2 network exists
    shell: neutron net-list | grep edge2
    register: edge2_result
    environment: keystone_env

  - name: Create edge2 network
    shell: neutron net-create edge2 --tenant_id admin --provider:network_type uplink | grep " id " | awk '{print $4}'
    register: edge2_id
    environment: keystone_env

  - name: Create edge1 subnet
    neutron_subnet: name=edge1_subnet state=present cidr=172.21.1.0/24 network_name=edge1 gateway_ip=172.21.1.3
                    login_username=admin login_password={{ admin_password }} login_tenant_name=admin tenant_name=admin
    register: edge1_subnet

  - name: Create edge2 subnet
    neutron_subnet: name=edge2_subnet state=present cidr=172.21.2.0/24 network_name=edge2 gateway_ip=172.21.2.3
                    login_username=admin login_password={{ admin_password }} login_tenant_name=admin tenant_name=admin
    register: edge2_subnet

  - name: Grab edge1 host id
    shell: midonet-cli -e host list | grep -i  "{{ hostvars[groups['edge'][0]]['ansible_hostname'] }}" | cut -d ' ' -f 2
    register: edge1_host_id

  - name: Grab edge1 host id
    shell: midonet-cli -e host list | grep -i  "{{ hostvars[groups['edge'][1]]['ansible_hostname'] }}" | cut -d ' ' -f 2
    register: edge2_host_id

  - name: Grab public network id
    shell: "neutron net-list | grep public | cut -d ' ' -f 2"
    register: public_network_id
    environment: keystone_env

  - name: Grab public subnet id
    shell: "neutron subnet-list | grep public | cut -d ' ' -f 2"
    register: public_subnet_id
    environment: keystone_env

  - name: Grab public subnet cidr
    shell: "neutron subnet-list | grep public | cut -d ' ' -f 6"
    register: public_subnet_cidr
    environment: keystone_env

    #TODO: check port exists
  - name: Create port for edge1
    shell: neutron port-create {{ edge1_id.stdout }} --binding:host_id  "{{ hostvars[groups['edge'][0]]['ansible_hostname'] }}" --binding:profile type=dict interface_name=eth1 --fixed-ip ip_address="{{ hostvars[groups['edge'][0]]['exterior_ip'] }}" | grep " id " | awk '{print $4}'
    register: port1_id
    environment: keystone_env

    #TODO: check port exists
  - name: Create port for edge2
    shell: neutron port-create {{ edge2_id.stdout }} --binding:host_id  "{{ hostvars[groups['edge'][1]]['ansible_hostname'] }}" --binding:profile type=dict interface_name=eth1 --fixed-ip ip_address="{{ hostvars[groups['edge'][1]]['exterior_ip'] }}" | grep " id " | awk '{print $4}'
    register: port2_id
    environment: keystone_env

    #TODO: check exists
  - name: Bind edge router to port1
    shell: neutron router-interface-add {{ edge_router.id }} port={{ port1_id.stdout }}
    environment: keystone_env

    #TODO: check exists
  - name: Bind edge router to port2
    shell: neutron router-interface-add {{ edge_router.id }} port={{ port2_id.stdout }}
    environment: keystone_env

    #TODO: check port exists
  - name: Bind edge router to public network
    shell: neutron router-interface-add {{ edge_router.id }} {{ public_subnet_id.stdout }}
    environment: keystone_env

  - name: add edge bgp local AS
    shell: "midonet-cli -e router {{ edge_router.id }} set asn 87654321"

  - name: add edge bgp peer 1
    shell: "midonet-cli -e router {{ edge_router.id }} add bgp-peer asn 12345678 address 172.21.1.3"

  - name: add edge bgp peer 2
    shell: "midonet-cli -e router {{ edge_router.id }} add bgp-peer asn 12345678 address 172.21.2.3"

  - name: Add bgp public network
    shell: "midonet-cli -e router {{ edge_router.id }} add bgp-network net {{ public_subnet_cidr.stdout }}"
