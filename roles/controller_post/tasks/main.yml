#
# Midonet Ansible Quickstart
# Copyright (C) 2015  Midokura SARL
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
---

- include: facts.yml

- name: Create keystonerc for admin
  template: src=keystonerc_admin.j2 dest=/root/keystonerc_admin

- name: Create keysotnerc for demo
  template: src=keystonerc_demo.j2 dest=/root/keystonerc_demo

- name: Did we already download CirrOS image?
  stat: path=/tmp/cirros.img
  register: cirros

- name: Install wget
  yum: name=wget state=present
  when: ansible_os_family == 'RedHat'

- name: Download CirrOS image
  shell: 'wget "{{ cirros_url }}" --prefer-family=IPv4 -O /tmp/cirros.img'
  when: cirros.stat.exists == false

- name: Add CirrOS image to glance
  glance: >
           name="{{ cirros_name }}"
           file=/tmp/cirros.img
           format=qcow2
           is_public=true
           auth_url=http://{{keystone_hostname}}:{{keystone_port}}/v2.0/
           username=admin
           tenant_name=admin
           password={{admin_pass}}
  register: cirros_glance

- debug: var=cirros_glance

- name: Create nano flavor
  nova_flavor:
    login_username: admin
    login_password: "{{ admin_pass }}"
    login_tenant_name: admin
    name: nano
    ram: 64
    vcpus: 1
    disk: 0
    is_public: 'yes'

- name: Upgrade iproute
  yum: name=iproute state=latest
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '6'

- name: Update public endpoints
  script: update-endpoints.py --username {{ mysql_admin_username }} --endpoint-type public \
          --password {{ mysql_rootpass }} --host {{ mysql_hostname }} --endpoint "{{ public_ip }}"
  when: hostvars.localhost.floating_ip_allinone is defined or hostvars.localhost.floating_ip_controller is defined

- name: Install neutron plugin
  apt: name=python-neutron-plugin-midonet update_cache=yes state=present
  when: ansible_os_family == 'Debian' and openstack_version != 'liberty' and (plugin_version is not defined or plugin_version == "default")

- name: Install neutron plugin
  apt: name=python-networking-midonet update_cache=yes state=present
  when: ansible_os_family == 'Debian' and openstack_version == 'liberty' and (plugin_version is not defined or plugin_version == "default")

- name: Install neutron plugin
  apt: name=python-neutron-plugin-midonet={{plugin_version}} update_cache=yes state=present
  when: ansible_os_family == 'Debian' and openstack_version != 'liberty' and (plugin_version is defined and plugin_version != "default")

- name: Install neutron plugin
  apt: name=python-networking-midonet={{plugin_version}} update_cache=yes state=present
  when: ansible_os_family == 'Debian' and openstack_version == 'liberty' and (plugin_version is defined and plugin_version != "default")

- name: Install mysql connector
  apt: name=python-mysql.connector state=present
  when: ansible_os_family == 'Debian'

- name: Install neutron plugin
  yum: name={{ item }} state=present
  with_items:
    - python-neutron-plugin-midonet
    - openstack-neutron-midonet
    - openstack-neutron-lbaas
    - mysql-connector-python
  when: ansible_os_family == 'RedHat' and openstack_version != 'liberty' and (plugin_version is not defined or plugin_version == "default")

- name: Install neutron plugin
  yum: name={{ item }} state=present
  with_items:
    - python-neutron-plugin-midonet-{{plugin_version}}
    - openstack-neutron-midonet
    - openstack-neutron-lbaas
    - mysql-connector-python
  when: ansible_os_family == 'RedHat' and openstack_version != 'liberty' and (plugin_version is defined and plugin_version != "default")

- name: Install neutron plugin
  yum: name={{ item }} state=present
  with_items:
    - python-networking-midonet
    - openstack-neutron-lbaas
    - mysql-connector-python
  when: ansible_os_family == 'RedHat' and openstack_version == 'liberty' and (plugin_version is not defined or plugin_version == "default")

- name: Install neutron plugin
  yum: name={{ item }} state=present
  with_items:
    - python-networking-midonet-{{plugin_version}}
    - openstack-neutron-lbaas
    - mysql-connector-python
  when: ansible_os_family == 'RedHat' and openstack_version == 'liberty' and (plugin_version is defined and plugin_version != "default")

- name: Create midonet plugin directory
  file: dest=/etc/neutron/plugins/midonet/ recurse=yes state=directory

- name: Configure midonet plugin
  template: src=midonet.ini.j2 dest=/etc/neutron/plugins/midonet/midonet_plugin.ini

- name: Remove neutron plugin link
  file: dest=/etc/neutron/plugin.ini state=absent

- name: Link midonet plugin
  file: src=/etc/neutron/plugins/midonet/midonet_plugin.ini dest=/etc/neutron/plugin.ini state=link

- name: Update neutron config
  ini_file: dest=/etc/neutron/neutron.conf section=DEFAULT option={{ item.option }} value={{ item.value }}
  with_items:
    - { option: 'core_plugin', value: "{{ midonet_plugin }}" }
    - { option: 'service_plugins', value: 'midonet.neutron.services.l3.l3_midonet.MidonetL3ServicePlugin,midonet.neutron.services.firewall.plugin.MidonetFirewallPlugin,lbaas' }
    - { option: 'router_scheduler_driver', value: null}
  notify:
    - Restart neutron server

- name: Update neutron services config
  ini_file: dest=/etc/neutron/neutron_lbaas.conf section=service_providers option={{ item.option }} value={{ item.value }}
  with_items:
    - { option: 'service_provider', value: "LOADBALANCER:Midonet:midonet.neutron.services.loadbalancer.driver.MidonetLoadbalancerDriver:default" }
  notify:
    - Restart neutron server

- name: Upgrade neutron db with midonet tables
  shell: neutron-db-manage --subproject networking-midonet upgrade head
  when: openstack_version == 'liberty'
  become: yes
  become_user: "neutron"

- name: Allow Neutron to select the correct plugin
  template: src=neutron-server.j2 dest=/etc/default/neutron-server
  notify:
    - Restart neutron server

- name: Update nova config
  ini_file: dest=/etc/nova/nova.conf section=DEFAULT option={{ item.option }} value={{ item.value }} backup=yes
  with_items:
    - { option: 'midonet_use_tunctl', value: 'True' }
    - { option: 'security_group_api', value: 'neutron' }
    - { option: 'firewall_driver', value: 'nova.virt.firewall.NoopFirewallDriver' }
    - { option: 'libvirt_vif_driver', value: 'nova.virt.libvirt.vif.LibvirtGenericVIFDriver' }
    - { option: 'midonet_uri', value: "http://{{ mgmt_ip }}:8181/midonet-api" }
    - { option: 'username', value: 'admin' }
    - { option: 'password', value: "{{ admin_pass }}" }
    - { option: 'project_id', value: 'admin' }
    - { option: 'auth_url', value: "http://{{ mgmt_ip }}:5000/v2.0" }
    - { option: 'novncproxy_base_url', value: "http://{{ public_ip }}:6080/vnc_auto.html" }
    - { option: 'vncserver_proxyclient_address', value: "{{ public_ip }}" }
  notify:
    - Restart nova services

- name: Update nova config
  ini_file: dest=/etc/nova/nova.conf section=neutron option={{ item.option }} value={{ item.value }} backup=yes
  with_items:
    - { option: 'metadata_proxy_shared_secret', value: "{{ metadata_secret }}" }
    - { option: 'url', value: "http://{{ mgmt_ip }}:9696" }
    - { option: 'auth_strategy', value: 'keystone' }
    - { option: 'admin_tenant_name', value: 'service' }
    - { option: 'admin_user', value: 'neutron' }
    - { option: 'admin_password', value: "{{ admin_pass }}" }
    - { option: 'admin_auth_url', value: "http://{{ mgmt_ip }}:5000/v2.0" }
  notify:
    - Restart nova services

- name: Update nova config
  ini_file: dest=/etc/nova/nova.conf section=glance option={{ item.option }} value={{ item.value }} backup=yes
  with_items:
    - { option: 'host', value: "{{ mgmt_ip }}" }
    - { option: 'port', value: "9292" }
    - { option: 'protocol', value: "http" }

- name: Update nova config
  ini_file: dest=/etc/nova/nova.conf section=database option={{ item.option }} value={{ item.value }} backup=yes
  with_items:
    - { option: 'connection', value: "mysql://nova:{{ admin_pass }}@{{ mgmt_ip }}/nova" }

- name: Update nova notification driver
  lineinfile: dest=/etc/nova/nova.conf insertbefore="^notification_driver = $" line={{ item }}
  with_items:
    - >
      "notification_driver = ceilometer.compute.nova_notifier"
    - >
      "notification_driver = nova.openstack.common.notifier.rpc_notifier"
  notify:
    - Restart nova services

#- name: Point horizon to root path
#  lineinfile: >
#    dest=/etc/apache2/conf-available/openstack-dashboard.conf
#    regexp='.*WSGIScriptAlias'
#    line="WSGIScriptAlias / /usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi"
#    backup=yes
#  notify:
#    - Restart apache2

- name: Disable dhcp agent and metadata agent
  service: name={{ item }} state=stopped enabled=no
  ignore_errors: yes
  with_items:
    - neutron-dhcp-agent
    - neutron-metadata-agent

- meta: flush_handlers

- name: Wait neutron
  wait_for: host=127.0.0.1 port=9696 timeout=30

- name: Create public network
  neutron_network: name=public state=present router_external=yes shared=true  admin_state_up=true
                   login_username=admin login_password={{ admin_pass }} login_tenant_name=admin
  register: public_network

- debug: var=public_network

- name: Get subnet prefix from local ip
  shell: hostname -I | cut -d "." -f 4 | cut -d " " -f1
  register: subnet_prefix
  when: hostvars.localhost.floating_ip_controller is defined

- name: Create public subnet
  neutron_subnet: name=public_subnet state=present cidr=200.200.{{ subnet_prefix.stdout }}.0/24 network_name=public
                  login_username=admin login_password={{ admin_pass }} login_tenant_name=admin tenant_name=admin
                  gateway_ip=200.200.{{ subnet_prefix.stdout }}.1
  when: hostvars.localhost.floating_ip_controller is defined

- name: Create public subnet
  neutron_subnet: name=public_subnet state=present cidr=200.200.200.0/24 network_name=public gateway_ip=200.200.200.1
                  login_username=admin login_password={{ admin_pass }} login_tenant_name=admin tenant_name=admin
  when: hostvars.localhost.floating_ip_controller is not defined

- name: Create tempest.conf
  template: src=tempest.conf.j2 dest=/root/tempest.conf

- name: Create deployment information (multinode)
  template: src=deployment_multinode.hosts.j2 dest=/root/deployment.hosts
  when: hostvars.localhost.floating_ip_controller is defined


- name: Set loglevel to debug in nova.conf (if loglevel==debug)
  ini_file:
    dest: '/etc/nova/nova.conf'
    section: 'DEFAULT'
    option: 'debug'
    value: 'True'
  when: loglevel == 'debug'
  notify:
    - Restart nova services

- name: Set loglevel to debug in neutron.conf (if loglevel==debug)
  ini_file:
    dest: '/etc/neutron/neutron.conf'
    section: 'DEFAULT'
    option: 'debug'
    value: 'True'
  when: loglevel == 'debug'
  notify:
    - Restart neutron server
